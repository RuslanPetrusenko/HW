{
	"info": {
		"_postman_id": "750f04b3-42fc-4e13-9b25-83008a2ccaed",
		"name": "group_29",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14922686"
	},
	"item": [
		{
			"name": "EP_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/get_method?name=str&age=int",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "str"
						},
						{
							"key": "age",
							"value": "int"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ruslan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_1?name=Ruslan&age=30&weight=100",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Ruslan"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "weight",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_2?name=Ruslan&age=31&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Ruslan"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Ruslan&age=31&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ruslan"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_6",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Ruslan&age=31&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ruslan"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ruslan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "hw2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ruslan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "hw2.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let requestData = request.data\r",
							"console.log(\"requestData\", requestData)\r",
							"\r",
							"//  Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name = jsonData.name\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(name).to.eql(requestData.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age = jsonData.age\r",
							"pm.test(\"Your test age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(age).to.eql(requestData.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary = jsonData.salary\r",
							"let requestData_salary =+ request.data.salary\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(salary).to.eql(requestData_salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family\r",
							"console.log(family);\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let salary_check = jsonData.salary * 4\r",
							"let u_salary_1_5_year = jsonData.family.u_salary_1_5_year \r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(salary_check).to.eql(u_salary_1_5_year);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ruslan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "hw2.2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let responseData = pm.response.json();\r",
							"console.log('responseData =', responseData)\r",
							"\r",
							"\r",
							"// Спарсить request.\r",
							"let requestData = pm.request.url.query.toObject()\r",
							"console.log('requestData =', requestData)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name response = name request\", function () {\r",
							"    pm.expect(responseData.name).to.eql(requestData.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let requestDataAge = pm.request.url.query.toObject()\r",
							"let ageNumber =+requestDataAge.age\r",
							"\r",
							"pm.test(\"age response = age request\", function () {\r",
							"    pm.expect(responseData.age).to.eql(ageNumber);\r",
							"});\r",
							"\r",
							"//  Вывести в консоль параметр salary из request.\r",
							"let requestDataSalary = pm.request.url.query.toObject()\r",
							"let requestSalary =+requestDataSalary.salary\r",
							"console.log('requestSalary =', requestSalary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"let responseDataSalary = pm.response.json();\r",
							"let responseSalary = responseDataSalary.salary\r",
							"console.log('responseSalary =', responseSalary )\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let responseDataSalary0 = pm.response.json();\r",
							"let responseSalaryElement = responseDataSalary.salary[0]\r",
							"console.log(responseSalaryElement)\r",
							"\r",
							"// 0. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let responseDataSalary1 = pm.response.json();\r",
							"let responseSalaryElement1 = responseDataSalary.salary[1]\r",
							"console.log(responseSalaryElement1)\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let responseDataSalary2 = pm.response.json();\r",
							"let responseSalaryElement2 = responseDataSalary.salary[2]\r",
							"console.log(responseSalaryElement2)\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary response = salary request\", function () {\r",
							"    pm.expect(responseSalaryElement).to.eql(requestSalary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let responseDataSalary_1 = pm.response.json();\r",
							"let responseSalaryElement_1 =+responseDataSalary_1.salary[1]\r",
							"let requestSalary_1 =+requestDataSalary.salary *2\r",
							"\r",
							"pm.test(\"salary response[1] = salary request*2\", function () {\r",
							"    pm.expect(requestSalary_1).to.eql(responseSalaryElement_1);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let responseDataSalary_2 = pm.response.json();\r",
							"let responseSalaryElement_2 =+responseDataSalary_2.salary[2]\r",
							"let requestSalary_2 =+requestDataSalary.salary *3\r",
							"\r",
							"pm.test(\"salary response[2] = salary request*3\", function () {\r",
							"    pm.expect(responseSalaryElement_2).to.eql(requestSalary_2);\r",
							"});\r",
							"\r",
							"//  Передать в окружение переменную name\r",
							"let response = pm.response.json();\r",
							"let nameEnvironment = response.name\r",
							"pm.environment.set(\"name\", nameEnvironment);\r",
							"\r",
							"// Передать в окружение переменную age\r",
							"let ageEnvironment = response.age\r",
							"pm.environment.set(\"age\", ageEnvironment);\r",
							"\r",
							"// Передать в окружение переменную salary\r",
							"let salaryEnvironment = pm.response.json();\r",
							"let salaryEnvironment_1 = responseDataSalary.salary[0]\r",
							"pm.environment.set(\"salary\", salaryEnvironment_1);\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let cycle = pm.response.json();\r",
							"let cycleSalary = cycle.salary\r",
							"for (let i = 0; i <= cycleSalary.length - 1; i++) {\r",
							"\tconsole.log(cycleSalary[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Ruslan&age=31&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ruslan"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "hw2.3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let responseData = pm.response.json();\r",
							"console.log('responseData =', responseData)\r",
							"\r",
							"\r",
							"// Спарсить request.\r",
							"let requestData = pm.request.url.query.toObject()\r",
							"console.log('requestData =', requestData)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name response = name request\", function () {\r",
							"    pm.expect(responseData.name).to.eql(requestData.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let requestDataAge = pm.request.url.query.toObject()\r",
							"let ageNumber = requestDataAge.age\r",
							"\r",
							"pm.test(\"age response = age request\", function () {\r",
							"    pm.expect(responseData.age).to.eql(ageNumber);\r",
							"});\r",
							"\r",
							"//  Вывести в консоль параметр salary из request.\r",
							"let responseDataFamily = pm.response.json();\r",
							"let responseFamily = responseDataFamily.family\r",
							"console.log('responseFamily =', responseFamily)\r",
							"\r",
							"//  Проверить, что у параметра dog есть параметры name.\r",
							"let body = pm.response.json();\r",
							"let dog_name = body.family.pets.dog\r",
							"// pm.expect(dog_name.hasOwnProperty(\"name\")).to.eql(true);\r",
							"\r",
							"pm.test(\"Check_dog_name\", function () {\r",
							"  pm.expect(dog_name).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"let dog_age = body.family.pets.dog\r",
							"pm.test(\"Check_dog_age\", function () {\r",
							"  pm.expect(dog_age).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"let dog_name_luky = body.family.pets.dog.name\r",
							"pm.test(\"Check_dog_name_Lucky\", function () {\r",
							"  pm.expect(dog_name_luky).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"let dog_age1 = body.family.pets.dog.age\r",
							"pm.test(\"Check_dog_age_4\", function () {\r",
							"  pm.expect(dog_age1).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Ruslan&age=31&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ruslan"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "hw2.4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let responseData = pm.response.json();\r",
							"console.log('responseData =', responseData)\r",
							"\r",
							"\r",
							"// Спарсить request.\r",
							"let requestData = request.data\r",
							"console.log('requestData =', requestData)\r",
							"\r",
							"\r",
							"//  Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"  pm.expect(responseData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"  pm.expect(responseData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"  pm.expect(responseData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"  pm.expect(responseData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"  pm.expect(responseData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"have_person\", function () {\r",
							"  pm.expect(responseData).to.have.property(\"person\");\r",
							"});\r",
							"  \r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let responseData1 = pm.response.json();\r",
							"let responseData2 = responseData1.start_qa_salary\r",
							"console.log('start_qa_salary', responseData2)\r",
							"let requestData1 =+ request.data.salary\r",
							"console.log('salary', requestData1)\r",
							"\r",
							"pm.test(\"start_qa_salary response = salary request\", function () {\r",
							"    pm.expect(requestData1).to.eql(responseData2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let responseData1_salary = pm.response.json();\r",
							"let responseData2_salary = responseData1.qa_salary_after_6_months\r",
							"console.log('responseData2_salary', responseData2_salary)\r",
							"let requestData2 =+ request.data.salary*2\r",
							"console.log('salary *2', requestData2)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2 из request\", function () {\r",
							"    pm.expect(responseData2_salary).to.eql(requestData2);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let responseData1_salary1 = pm.response.json();\r",
							"let responseData2_salary2 = responseData1_salary1.qa_salary_after_12_months\r",
							"console.log('responseData2_salary2', responseData2_salary2)\r",
							"let requestData3 =+ request.data.salary*2.7\r",
							"console.log('salary *2.7', requestData3)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2 из request\", function () {\r",
							"    pm.expect(responseData2_salary2).to.eql(requestData3);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let responseData1_salary3 = pm.response.json();\r",
							"let responseData2_salary4 = responseData1_salary3['qa_salary_after_1.5_year']\r",
							"console.log('responseData2_salary4', responseData2_salary4)\r",
							"let requestData4=+request.data.salary*3.3\r",
							"console.log('salary *3.3', requestData4)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3 из request\", function () {\r",
							"    pm.expect(responseData2_salary4).to.eql(requestData4);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let responseData1_salary5 = pm.response.json();\r",
							"let responseData2_salary6 = responseData1_salary5['qa_salary_after_3.5_years']\r",
							"console.log('responseData2_salary5', responseData1_salary5)\r",
							"let requestData5=+request.data.salary*3.8\r",
							"console.log('salary *3.8', requestData4)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8 из request\", function () {\r",
							"    pm.expect(responseData2_salary4).to.eql(requestData4);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let responseData1_salary7 = pm.response.json();\r",
							"let responseData2_salary8 = responseData1_salary7.person.u_name[1]\r",
							"console.log('1-й элемент из u_name', responseData2_salary8)\r",
							"let requestData6=+request.data.salary\r",
							"console.log('salary', requestData6)\r",
							"pm.test(\"1-й элемент из u_name = salary из request\", function () {\r",
							"    pm.expect(responseData2_salary8).to.eql(requestData6);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let responseData1_salary9 = pm.response.json();\r",
							"let responseData2_salary10 = responseData1_salary9.person.u_age\r",
							"console.log('responseData2_salary10', responseData2_salary10)\r",
							"let requestData7= request.data.age\r",
							"console.log(' age из request ', requestData7)\r",
							"pm.test(\"u_age из response = age из request\", function () {\r",
							"    pm.expect(responseData2_salary4).to.eql(requestData4);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let responseData1_salary11 = pm.response.json();\r",
							"let responseData2_salary12 = responseData1_salary11.person.u_salary_5_years\r",
							"console.log('u_salary_5_years', responseData2_salary12)\r",
							"let requestData8= request.data.salary*4.2\r",
							"console.log(' age из request *4.2', requestData8)\r",
							"pm.test(\"u_age из response = age из request\", function () {\r",
							"    pm.expect(responseData2_salary12).to.eql(requestData8);\r",
							"});\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let cycle = pm.response.json();\r",
							"let cycleAll = cycle.person\r",
							"for (let key in cycleAll) {\r",
							"  if(cycleAll.hasOwnProperty(key)){\r",
							"    console.log(`${key} : ${cycleAll[key]}`)\r",
							"  }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "salary",
							"value": "2000",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Ruslan",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}