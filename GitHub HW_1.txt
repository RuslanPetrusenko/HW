Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash



Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON.   ========= нажать Repositories, New, Name
 5. Клонировать репозиторий JSON на локальный компьютер. ========= git clone и ссылка на внешний репозиторий
 6. Внутри локального JSON создать файл “new.json”. ========= cd JSON, touch new.json
 7. Добавить файл под гит. ========= git add .
 8. Закоммитить файл. ========= git commit -m "create file new.json"
 9. Отправить файл на внешний GitHub репозиторий.========= git push
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON. 
 11. Отправить изменения на внешний репозиторий. ========= git status, git add ., git commit -m "create new.json", git push
 12. Создать файл preferences.json ========= vim preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON. 
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON ========= vim sklls.json
 15. Отправить сразу 2 файла на внешний репозиторий. ========= git status, git add ., git commit -m "create "preferences.json and sklls.json", git push
 16. На веб интерфейсе создать файл bug_report.json. ========= зайти в директорию нажать кнопку "Add file"
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе. ========= add, нажать конпку "Commit new file"
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON. ========= Открыть файл в репозитории, внести изменения
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе. ========= Нажать конпку "Commit change"
 20. Синхронизировать внешний и локальный репозиторий JSON ========= git pull


XML
 21. Создать внешний репозиторий c названием XML. ========= нажать Repositories, New, Name 
 22. Клонировать репозиторий XML на локальный компьютер. ========= git clone и ссылка на внешний репозиторий
 23. Внутри локального XML создать файл “new.xml”. ========= cd xml
 24. Добавить файл под гит. ========= git add .
 25. Закоммитить файл. ========= git commit -m "create "first.xml and sklls.json"
 26. Отправить файл на внешний GitHub репозиторий. ========= git push
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML. =========
 28. Отправить изменения на внешний репозиторий. =========  git status, git add ., git commit -m "create "create new.xml", git push
 29. Создать файл preferences.xml ========= vim preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML. =========
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML ========= vim skills.xml
 32. Сделать коммит в одну строку. ========= git commit -m "create preferences.xml and sklls.xml", git add .
 33. Отправить сразу 2 файла на внешний репозиторий. ========= git push
 34. На веб интерфейсе создать файл bug_report.xml. ========= add file, нажать конпку "Commit new file"
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе. ========= Нажать конпку "Commit change"
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML. ========= edit file
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе. =========  Нажать конпку "Commit change"
 38. Синхронизировать внешний и локальный репозиторий XML ========= git fetch
